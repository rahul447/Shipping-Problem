{"version":3,"sources":["../../../lib/endpoints/services/cloudTravel.es6"],"names":["cloudTravel","latArr","longArr","ValidPorts","start","end","earthRadius","lat1","lat2","lon1","lon2","Math","acos","sin","cos","startpoint","travelPath","validPortsMap","get","indexOf","milesTraveled","split","map","tval","distanceMap","ival","iterateMap","Map","key","value","mapkey","ipts","set","calcArcLength","Promise","resolve","reject","validate","then","data","length","calcTravelDistance","catch","err","latLongMap","val","inRange","modObj","lat","long","validPortArr","innerval","parseInt","push"],"mappings":"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","file":"cloudTravel.js","sourcesContent":["\"use strict\";\nimport _ from \"lodash\";\n\nexport class cloudTravel {\n\n    constructor(latArr, longArr, ValidPorts, start, end) {\n        this.earthRadius = 4000;\n        this.latArr = latArr;\n        this.longArr = longArr;\n        this.ValidPorts = ValidPorts;\n        this.start = start;\n        this.end = end;\n    }\n\n    calcArcLength(lat1, lat2, lon1, lon2) {\n        return this.earthRadius * Math.acos(Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1)\n                * Math.cos(lat2) * Math.cos(lon1 - lon2))\n    }\n\n    iterateMap(startpoint, travelPath) {\n\n        if(this.validPortsMap.get(startpoint).indexOf(this.end) > -1) {\n            travelPath += \"=>\" + this.end + \",\";\n            let milesTraveled = 0.0;\n            travelPath.split(\",\").map((tval) => {\n                if(tval){\n                    milesTraveled += this.distanceMap.get(tval);\n                }\n            });\n            this.milesTraveled = milesTraveled;\n        }else {\n            this.validPortsMap.get(startpoint).map((ival) => {\n                travelPath += \"=>\" + ival + \",\" + ival;\n                this.iterateMap(ival, travelPath);\n            });\n        }\n    }\n\n    calcTravelDistance() {\n        let distanceMap = new Map();\n        for (let [key, value] of this.validPortsMap) {\n            let mapkey = key + \"=>\";\n            value.map((ipts) => {\n                distanceMap.set(mapkey + ipts, this.calcArcLength(this.latArr[key],\n                    this.latArr[ipts], this.longArr[key], this.longArr[ipts]))\n            });\n        }\n        return distanceMap;\n    }\n\n    calcShortestTrip() {\n        return new Promise((resolve,reject) => {\n            this.validate().then((data) => {\n\n                if(data.validPortsMap.get(this.start).length === 1\n                    && data.validPortsMap.get(data.validPortsMap.get(this.start)[0]).length === 1 && data.validPortsMap.get(data.validPortsMap.get(this.start)[0])[0] === this.start) {\n                    resolve(-1);\n                } else if(this.start === this.end) {\n                    resolve(0.0);\n                } else{\n                    this.validPortsMap = data.validPortsMap;\n                    this.distanceMap = this.calcTravelDistance();\n                    let travelPath = this.start;\n\n                    this.iterateMap(this.start, travelPath);\n                    resolve(this.milesTraveled);\n                }\n\n            }).catch(err => {\n                reject(err);\n            });\n        });\n    }\n\n    validate() {\n        return new Promise((resolve, reject) => {\n            if(!(this.latArr.length === this.longArr.length ||\n                this.latArr.length === this.ValidPorts.length)) {\n                reject(\"cloudTravel.validate()// \" +\n                    \"Length of Lat, Long, ValidPorts not Equal\");\n            }else if(this.latArr.length > 20 || this.longArr.length > 20\n                || this.ValidPorts.length > 20) {\n                reject(\"cloudTravel.validate()// \" +\n                    \"Length of Lat or Long or ValidPorts > 20\");\n            }else {\n                let latLongMap = new Map(),\n                validPortsMap = new Map();\n\n                this.latArr.map((val, key) => {\n                    if(!_.inRange(val, -89, 90)){\n                        reject(\"cloudTravel.validate()// \" +\n                            \"Lat val not valid\");\n                    }\n                    latLongMap.set(key, {\"lat\": val});\n                });\n\n                this.longArr.map((val, key) => {\n                    if(!_.inRange(val, -179, 180)){\n                        reject(\"cloudTravel.validate()// \" +\n                            \"Long val not valid\");\n                    }\n\n                    let modObj = latLongMap.get(key);\n\n                    for (let [, value] of latLongMap) {\n\n                        if(modObj.lat === value.lat && val === value.long) {\n                            reject(\"cloudTravel.validate()// \" +\n                                \"Same Lat long not allowed for two airports\");\n                        }\n                    }\n\n                    modObj.long = val;\n                });\n\n                this.ValidPorts.map((val, key) => {\n                    let validPortArr = [];\n\n                    val.split(\"|\").map((innerval) => {\n                        if(!(_.inRange(parseInt(innerval), 0, this.latArr.length))) {\n                            reject(\"cloudTravel.validate()// \" +\n                                \"validPort val not valid\");\n                        }\n                        validPortArr.push(parseInt(innerval));\n                    });\n                    validPortsMap.set(key, validPortArr);\n                });\n\n                if(!(_.inRange(this.start, 0, this.latArr.length))) {\n                    reject(\"cloudTravel.validate()// \" +\n                        \"start val not valid\");\n                }\n\n                if(!(_.inRange(this.end, 0, this.latArr.length))) {\n                    reject(\"cloudTravel.validate()// \" +\n                        \"end val not valid\");\n                }\n                resolve({latLongMap, validPortsMap});\n            }\n        });\n    }\n}\n\n"]}